Implement the takeOutLoan method in Java using Spring to handle loan requests based on predefined business rules, throwing an exception when a rule is violated. If everything is ok, the Loan entity must be saved.

We have the following table/entity
Entity Definitions:
Client:
ID: int
Name: String
CreditLimit: double (The maximum amount of money that the user can take out in total)
Loan:
ProductName: Enum (CASH_LOAN, PERSONAL_LOAN)
ClientId: int. The user who took out this loan.
Principal: double (The amount of money that the user took out)
Request Object:
LoanRequest:
ProductName: Enum (CASH_LOAN, PERSONAL_LOAN)
Principal: double (The amount the user wants to withdraw)
ClientId: int
Method to Implement:
void takeOutLoan(
 loanRequest): Validates and processes a loan request. It should:
Validates that the requested amount (loanRequest.principal) plus the previous loans that the user has taken out does not exceed the user's credit limit.
Validates the user can’t  have more than 2 CASH_LOAN. Ok
Validates the user can’t have  more than 4 PERSONAL_LOAN. OK
Ensure the user does not exceed a total of 4 loans of any type. OK
Example

Client.Name = MARCELO, Client.CreditLImit = 10.000$. Current Loans = [CASH_LOAN_1=4000, CASH_LOAN_2= 5000].
If the user requests a Cash Loan, it should be rejected. // The user already has two cash loans.
If the user requests a PersonaLoan for 15.000$, it should be rejected. // Exceeds the creditLimit
If the user request any type of Loan for 2.000$, it should be rejected because 4000 + 5000 + 2000 > Client.CreditLimit (10.000)



@Service
public class LoanService {
	
   @Repository
   ClientRepository clientRepository;

    @Repository
    LoanRepository loanRepostiroy;

     // Required annotations
    public void takeOutLoan(LoanRequest loanRequest) {
	Client client = clientRepository.findByClientId(loanRequest.clientId)
	List<Loan> loans = loanRepostiroy.findByClientId(loanRequest.clientId)
	
	If (loans.size() == 4){
		Throw LoanRequestRejected("maxium number of loans achived ") 

}

	Int amountOfCashLoan = loans.stream().filter(l -> "CASH_LOAN".equals(l.productName)).toList().size(); 

	if("CASH_LOAN".equals(loanRequest.ProductName) &&  amountOfCashLoan + 1 > 2 ){
		Throw LoanRequestRejected(" amount of cash loan is above the allowed ") 
}

Int amountOfPersonalLoan = loans.stream().filter(l -> "PERSONAL_LOAN".equals(l.productName)).toList().size(); 

if("PERSONAL_LOAN".equals(loanRequest.ProductName) &&  amountOfCashLoan + 1 > 4 ){
		Throw LoanRequestRejected(" amount of personal loan is above the allowed ") 
}


Double totalCredit  = loans.stream().reduce((acc, cur) -> acc + cur.Principal , 0).toList().size();

Int amountRemaning = client.CreditLimit - totalCredit - loanRequest.Principal;

if(amountRemaning < 0){
Throw LoanRequestRejected(" rechieded the amount of credit allowed ")
}


// Store the new Loan.
    }
}




